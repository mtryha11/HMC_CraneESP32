#include <Arduino.h>
#include <TaskHMI.h>
#include <ModbusMaster.h>
#include <Preferences.h>

ModbusMaster node;
extern Preferences preferences;

uint8_t Page_status=0;
bool Trigger_Page=0;
uint8_t result,j;

bool Trigger_Setting_Angle=0;
bool Trigger_Setting_Angle_calib0=0;
bool Trigger_Setting_Angle_calib1=0;

bool Trigger_Setting_Length=0;
bool Trigger_Setting_Length_calib0=0;
bool Trigger_Setting_Length_calib1=0;

bool Trigger_Setting_Press=0;
bool Trigger_Setting_Device=0;
bool Trigger_Setting_Other=0;
bool Trigger_Setting_Other1=0;
bool Trigger_Cab_Input=0;
bool Trigger_Main_Aux=0;
bool Trigger_Loadtable=0;
bool Trigger_L_LD=0;
bool Trigger_CentralBallas=0;
bool Trigger_CW=0;
bool Trigger_Pump=0;
bool Trigger_Bypass=0;
bool Pump=0;
bool Bypass=0;

bool Trigger_Length_nhapmanhinh=0;
bool Set_load_0=0;
bool Trigger_Setting_Load=0;


bool Trigger_Setting_Loadcell1_calib0=0;
bool Trigger_Setting_Loadcell1_calib1=0;
bool Trigger_Setting_Loadcell2_calib0=0;
bool Trigger_Setting_Loadcell2_calib1=0;
bool Trigger_Setting_Loadcell=0;
bool Trigger_Customer=0;


void Capnhatbangtai()
{
    memset(LT, 0, sizeof(LT));
    if(L_LD==0)
    {
        if(Ballas30_90==0)
        {
            if(CW0_56_108_160_180==0)
            {
            	Socot=5;
            	Sohang=24;
            	uint16_t Bangtai[Sohang*Socot]=
            	{0,2100,2800,3500,4210,
				500,31800,22200,16900,12200,
				550,26400,22200,16900,12200,
				600,22500,19300,16900,12200,
				650,19600,17100,15100,12200,
				700,17300,15300,13600,12200,
				800,14000,12500,11300,10300,
				900,11700,10600,9700,8800,
				1000,10000,9100,8400,7700,
				1100,8700,8000,7300,6800,
				1200,7600,7000,6500,6000,
				1400,5800,5700,5200,4850,
				1600,4600,4600,4300,4000,
				1800,3750,3750,3600,3300,
				2000,3150,3100,3050,2800,
				2200,0,2640,2570,2380,
				2400,0,2260,2190,2040,
				2600,0,1950,1870,1750,
				2800,0,0,1620,1470,
				3000,0,0,1400,1240,
				3200,0,0,1210,1040,
				3400,0,0,0,870,
				3600,0,0,0,730,
				3800,0,0,0,620};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==1)
            {
            	Socot=8;
            	Sohang=29;
            	uint16_t Bangtai[Sohang*Socot]=
            	{0,2100,2800,3500,4200,4900,5600,6310,
				500,41800,35000,30200,22200,17400,16100,13200,
				550,38300,35000,30200,22200,17400,16100,13200,
				600,35400,34500,30200,22200,17400,16100,13200,
				650,32800,30600,27100,22200,17400,16100,13200,
				700,30600,27500,24600,22200,17400,16100,13200,
				800,25300,22700,20700,18900,17400,16100,13200,
				900,21200,19400,17800,16400,15200,14100,13200,
				1000,18300,16800,15500,14400,13400,12600,11800,
				1100,16000,14800,13800,12800,12000,11300,10600,
				1200,13900,13200,12400,11600,10800,10200,9600,
				1400,10800,10800,10200,9600,9000,8500,8000,
				1600,8700,8700,8600,8100,7600,7200,6800,
				1800,7300,7300,7200,7000,6600,6200,5900,
				2000,6200,6200,6100,6100,5700,5400,5100,
				2200,0,5400,5300,5200,5000,4750,4500,
				2400,0,4700,4650,4550,4450,4200,3950,
				2600,0,4150,4100,4000,3900,3750,3500,
				2800,0,0,3650,3550,3450,3350,3100,
				3000,0,0,3250,3150,3100,3000,2780,
				3200,0,0,2950,2850,2750,2690,2490,
				3400,0,0,0,2570,2470,2400,2230,
				3600,0,0,0,2330,2230,2160,2000,
				3800,0,0,0,2130,2010,1940,1770,
				4000,0,0,0,0,1820,1740,1570,
				4400,0,0,0,0,1490,1400,1220,
				4800,0,0,0,0,0,1120,940,
				5200,0,0,0,0,0,0,710,
				5600,0,0,0,0,0,0,550};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==2)
            {
            	Socot=10;
            	Sohang=32;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,2100,2800,3500,4200,4900,5600,6300,7000,7710,
				500,41800,40000,33000,27500,23500,20000,16000,13000,11300,
				550,40200,40000,33000,27500,23500,20000,16000,13000,11300,
				600,38700,38000,33000,27500,23500,20000,16000,13000,11300,
				650,36200,36000,32200,27500,23500,20000,16000,13000,11300,
				700,33800,33700,31500,27500,23500,20000,16000,13000,11300,
				800,29800,29700,29200,26400,23500,20000,16000,13000,11300,
				900,26600,26500,25200,23300,21700,19300,16000,13000,11300,
				1000,24000,23900,22200,20600,19300,18100,15500,13000,11300,
				1100,21700,21200,19700,18400,17300,16300,15000,12500,10900,
				1200,19600,19000,17700,16700,15700,14800,14000,12100,10600,
				1400,15300,15300,14700,13900,13100,12500,11900,11200,10000,
				1600,12500,12500,12400,11900,11200,10700,10200,9700,9200,
				1800,10500,10500,10400,10300,9800,9300,8900,8400,8000,
				2000,9000,9000,8900,8900,8600,8200,7900,7400,7100,
				2200,0,7900,7800,7700,7600,7300,7000,6600,6300,
				2400,0,6900,6900,6800,6700,6600,6300,5900,5600,
				2600,0,6200,6100,6000,5900,5900,5600,5300,5000,
				2800,0,0,5500,5400,5300,5300,5100,4800,4550,
				3000,0,0,5000,4900,4800,4750,4650,4350,4100,
				3200,0,0,4550,4450,4350,4300,4200,3950,3750,
				3400,0,0,0,4050,3950,3900,3800,3600,3400,
				3600,0,0,0,3700,3600,3550,3450,3300,3100,
				3800,0,0,0,3450,3300,3250,3150,3000,2820,
				4000,0,0,0,0,3050,2980,2880,2760,2570,
				4400,0,0,0,0,2620,2540,2430,2300,2140,
				4800,0,0,0,0,0,2180,2070,1910,1750,
				5200,0,0,0,0,0,0,1740,1590,1430,
				5600,0,0,0,0,0,0,1480,1320,1150,
				6000,0,0,0,0,0,0,0,1090,920,
				6400,0,0,0,0,0,0,0,0,720,
				6800,0,0,0,0,0,0,0,0,580};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==3)
            {
            	Socot=14;
            	Sohang=30;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,2100,2800,3500,4200,4900,5600,6300,7000,7700,8400,9100,9800,10510,
				800,16200,18700,21800,24500,22700,20000,16000,13000,11300,9500,8200,6800,6800,
				900,16200,18700,21800,24500,22700,19300,16000,13000,11300,9500,8200,6800,6800,
				1000,16200,18700,21800,24500,21900,18600,15500,13000,11300,9500,8200,6800,6800,
				1100,16200,18700,21800,23500,21100,18000,15000,12500,10900,9500,8200,6800,6800,
				1200,16200,18700,21800,21600,20300,17300,14500,12100,10600,9200,7900,6800,6800,
				1400,16200,18700,18600,18200,17300,16100,13500,11400,10000,8700,7400,6400,5500,
				1600,16200,16100,16000,15600,14900,14200,12600,10700,9500,8200,7000,6000,5200,
				1800,13700,13700,13700,13600,13000,12500,11700,10200,9000,7800,6600,5700,4900,
				2000,11800,11800,11800,11700,11500,11100,10600,9700,8600,7500,6300,5500,4600,
				2200,0,10300,10300,10200,10100,9900,9500,9100,8200,7100,6000,5200,4400,
				2400,0,9200,9100,9000,8900,8900,8600,8200,7800,6800,5800,5000,4200,
				2600,0,8200,8200,8100,8000,7900,7800,7400,7100,6500,5600,4700,4000,
				2800,0,0,7400,7300,7200,7100,7000,6800,6500,6200,5300,4500,3800,
				3000,0,0,6700,6600,6500,6400,6400,6200,5900,5600,5100,4400,3700,
				3200,0,0,6100,6000,5900,5900,5800,5700,5400,5200,4900,4200,3500,
				3400,0,0,0,5500,5400,5400,5300,5200,5000,4700,4500,4100,3400,
				3600,0,0,0,5100,5000,5950,4850,4700,4600,4300,4200,3900,3200,
				3800,0,0,0,4750,4650,4550,4450,4300,4200,4000,3800,3650,3100,
				4000,0,0,0,0,4300,4200,4100,4000,3900,3700,3500,3400,3000,
				4400,0,0,0,0,3750,3650,3550,3400,3300,3200,3000,2860,2700,
				4800,0,0,0,0,0,3200,3050,2900,2800,2700,2600,2400,2300,
				5200,0,0,0,0,0,0,2690,2500,2400,2300,2200,2000,1900,
				5600,0,0,0,0,0,0,2370,2200,2100,1900,1800,1700,1600,
				6000,0,0,0,0,0,0,0,1900,1800,1600,1500,1400,1300,
				6400,0,0,0,0,0,0,0,0,1500,1400,1300,1100,1000,
				6800,0,0,0,0,0,0,0,0,1300,1200,1000,900,750,
				7200,0,0,0,0,0,0,0,0,0,1000,850,700,570,
				7600,0,0,0,0,0,0,0,0,0,0,680,550,420,
				8000,0,0,0,0,0,0,0,0,0,0,550,410,0};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==4)
            {
            	Socot=12;
            	Sohang=29;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,3500,4200,4900,5600,6300,7000,7700,8400,9100,9800,10510,
				1000,14700,16600,18900,17300,15000,13000,11300,9500,8200,6800,5500,
				1100,14700,16600,18900,17300,15000,12500,10900,9500,8200,6800,5500,
				1200,14700,16600,18900,17300,14500,12100,10600,9200,7900,6800,5500,
				1400,14700,16600,18900,16100,13500,11400,10000,8700,7400,6400,5500,
				1600,14700,16600,16300,15000,12600,10700,9500,8200,7000,6000,5200,
				1800,14700,14600,14300,13700,11700,10200,9000,7800,6600,5700,4900,
				2000,12800,12800,12700,12200,10900,9700,8600,7500,6300,5500,4600,
				2200,11200,11200,11100,10900,10200,9200,8200,7100,6000,5200,4400,
				2400,10000,9900,9800,9800,9500,8700,7900,6800,5800,5000,4200,
				2600,8900,8900,8800,8700,8600,8200,7600,6500,5600,4700,4000,
				2800,8100,8000,7900,7800,7800,7500,7200,6200,5300,4500,3800,
				3000,7400,7300,7200,7100,7000,6900,6600,6000,5100,4400,3700,
				3200,6700,6600,6500,6500,6400,6300,6100,5800,4900,4200,3500,
				3400,0,6100,6000,5900,5900,5700,5600,5300,4800,4100,3400,
				3600,0,5700,5500,5500,5400,5300,5200,4950,4600,3900,3200,
				3800,0,5200,5100,5100,4950,4850,4750,4550,4400,3800,3100,
				4000,0,0,4750,4700,4600,4450,4400,4250,4050,3700,3000,
				4400,0,0,4150,4050,3950,3850,3750,3650,3500,3350,2800,
				4800,0,0,0,3550,3450,3350,3250,3150,3000,2860,2600,
				5200,0,0,0,0,3050,2910,2810,2710,2600,2460,2300,
				5600,0,0,0,0,2700,2560,2460,2340,2220,2080,1950,
				6000,0,0,0,0,0,2260,2130,2010,1900,1760,1630,
				6400,0,0,0,0,0,0,1850,1730,1610,1470,1340,
				6800,0,0,0,0,0,0,1610,1480,1370,1220,1080,
				7200,0,0,0,0,0,0,0,1270,1150,1000,860,
				7600,0,0,0,0,0,0,0,0,960,800,670,
				8000,0,0,0,0,0,0,0,0,800,650,520,
				8400,0,0,0,0,0,0,0,0,0,520,390};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }
        }

        if(Ballas30_90==1)
        {
            if(CW0_56_108_160_180==0)
            {
            	Socot=6;
            	Sohang=26;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,2100,2800,3500,4200,4910,
				500,37100,29400,22500,16400,12700,
				550,34000,29400,22500,16400,12700,
				600,29900,25700,22500,16400,12700,
				650,26100,22700,20100,16400,12700,
				700,23100,20400,18200,16400,12700,
				800,18700,16800,15200,13900,12700,
				900,15700,14300,13100,12000,11100,
				1000,13500,12300,11400,10500,9700,
				1100,11700,10800,10000,9300,8700,
				1200,10200,9600,9000,8300,7800,
				1400,7800,7800,7300,6800,6400,
				1600,6300,6300,6100,5700,5300,
				1800,6200,5200,5100,4850,4500,
				2000,4400,4400,4350,4150,3850,
				2200,0,3750,3700,3600,3350,
				2400,0,3250,3200,3100,2910,
				2600,0,2870,2790,2700,2550,
				2800,0,0,2460,2360,2230,
				3000,0,0,2170,2080,1960,
				3200,0,0,1940,1840,1700,
				3400,0,0,0,1630,1470,
				3600,0,0,0,1440,1280,
				3800,0,0,0,1270,1110,
				4000,0,0,0,0,960,
				4400,0,0,0,0,710};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==1)
            {
            	Socot=9;
            	Sohang=30;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,2100,2800,3500,4200,4900,5600,6300,7010,
				500,41800,38000,33000,26400,20700,19200,15800,13000,
				550,38300,38000,33000,26400,20700,19200,15800,13000,
				600,35400,35000,33000,26400,20700,19200,15800,13000,
				650,32800,32800,32200,26400,20700,19200,15800,13000,
				700,30600,30600,29200,26400,20700,19200,15800,13000,
				800,26900,26900,24600,22500,20700,19200,15800,13000,
				900,23600,23100,21200,19600,18100,16900,15800,13000,
				1000,21000,20100,18600,17300,16100,15100,14200,13000,
				1100,18800,17700,16500,15400,14400,13600,12800,12000,
				1200,16500,15900,14800,13900,13000,12300,11600,10900,
				1400,12800,12800,12300,11500,10900,10300,9800,9200,
				1600,10400,10400,10400,9800,9300,8800,8400,7900,
				1800,8700,8700,8700,8500,8000,7700,7300,6800,
				2000,7500,7500,7400,7300,7000,6700,6400,6000,
				2200,0,6500,6400,6300,6200,5900,5600,5300,
				2400,0,5700,5600,5600,5500,5300,5000,4700,
				2600,0,5100,5000,4900,4850,4750,4500,4150,
				2800,0,0,4500,4400,4300,4250,4000,3750,
				3000,0,0,4050,3950,3850,3800,3650,3350,
				3200,0,0,3650,3550,3450,3400,3300,3000,
				3400,0,0,0,3250,3150,3050,2980,2720,
				3600,0,0,0,2960,2850,2780,2690,2460,
				3800,0,0,0,2710,2600,2530,2430,2220,
				4000,0,0,0,0,2380,2310,2210,2010,
				4400,0,0,0,0,2010,1930,1810,1600,
				4800,0,0,0,0,0,1610,1480,1270,
				5200,0,0,0,0,0,0,1210,1000,
				5600,0,0,0,0,0,0,980,760,
				6000,0,0,0,0,0,0,0,600};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==2)
            {
            	Socot=10;
            	Sohang=32;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,2100,2800,3500,4200,4900,5600,6300,7000,7710,
				500,46000,40000,33000,27500,23500,20000,16000,13000,11300,
				550,42200,40000,33000,27500,23500,20000,16000,13000,11300,
				600,39000,38000,33000,27500,23500,20000,16000,13000,11300,
				650,36200,36000,32200,27500,23500,20000,16000,13000,11300,
				700,33800,33700,31500,27500,23500,20000,16000,13000,11300,
				800,29800,29700,29600,26400,23500,20000,16000,13000,11300,
				900,26600,26500,26400,25500,22700,19300,16000,13000,11300,
				1000,24000,23900,23800,23500,21900,18600,15500,13000,11300,
				1100,21700,21600,21500,21000,19700,18000,15000,12500,10900,
				1200,19700,19600,19500,19000,17900,17000,14500,12100,10600,
				1400,16600,16500,16400,15900,15000,14300,13500,11400,10000,
				1600,14200,14200,14100,13600,12900,12300,11800,10700,9500,
				1800,12000,11900,11900,11800,11300,10800,10300,9800,9000,
				2000,10300,10300,10200,10100,9900,9500,9100,8700,8300,
				2200,0,9000,8900,8800,8700,8500,8100,7700,7400,
				2400,0,8000,7900,7800,7700,7700,7300,6900,6600,
				2600,0,7100,7000,6900,6900,6800,6600,6300,6000,
				2800,0,0,6300,6200,6200,6100,6000,5700,5400,
				3000,0,0,5800,5700,5600,5500,5400,5200,3950,
				3200,0,0,5300,5200,5100,5000,4900,4750,4500,
				3400,0,0,0,4700,4600,4550,4450,4350,4100,
				3600,0,0,0,4350,4250,4150,4100,3950,3800,
				3800,0,0,0,4000,3900,3850,3750,3600,3500,
				4000,0,0,0,0,3600,3550,3450,3300,3200,
				4400,0,0,0,0,3100,3050,2930,2800,2710,
				4800,0,0,0,0,0,2630,2520,2390,2280,
				5200,0,0,0,0,0,0,2180,2030,1910,
				5600,0,0,0,0,0,0,1890,1730,1610,
				6000,0,0,0,0,0,0,0,1470,1340,
				6400,0,0,0,0,0,0,0,0,1120,
				6800,0,0,0,0,0,0,0,0,920};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==3)
            {
            	Socot=14;
            	Sohang=37;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,2100,2800,3500,4200,4900,5600,6300,7000,7700,8400,9100,9800,10510,
				450,55000,40000,33000,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				500,50000,40000,33000,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				550,46100,40000,33000,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				600,42600,38000,33000,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				650,39500,36500,32200,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				700,36900,35000,31500,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				800,32500,32400,30100,26400,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				900,29100,29000,28900,25500,22700,19300,16000,13000,11300,9500,8200,6800,5500,
				1000,26300,26200,26100,24500,21900,18600,15500,13000,11300,9500,8200,6800,5500,
				1100,23900,23800,23700,23500,21100,18000,15000,12500,10900,9500,8200,6800,5500,
				1200,22000,21900,21800,21600,20300,17300,14500,12100,10600,9200,7900,6800,5500,
				1400,18800,18700,18600,18500,18400,16100,13500,11400,10000,8700,7400,6400,5500,
				1600,16200,16100,16000,15900,15800,15000,12600,10700,9500,8200,7000,6000,5200,
				1800,14200,14100,14000,13900,13800,13700,11700,10200,9000,7800,6600,5700,4900,
				2000,12600,12600,12400,12300,12200,12200,10900,9700,8600,7500,6300,5500,4600,
				2200,0,11300,11200,11100,10900,10900,10200,9200,8200,7100,6000,5200,4400,
				2400,0,10200,10100,10000,9900,9800,9500,8700,7900,6800,5800,5000,4200,
				2600,0,9100,9100,9000,8900,8800,8800,8200,7600,6500,5600,4700,4000,
				2800,0,0,8200,8100,8000,8000,7900,7600,7300,6200,5300,4500,3800,
				3000,0,0,7500,7400,7300,7200,7100,7000,6700,6000,5100,4400,3700,
				3200,0,0,6800,6800,6600,6600,6500,6400,6200,5800,4900,4200,3500,
				3400,0,0,0,6200,6100,6000,5900,5800,5700,5500,4800,4100,3400,
				3600,0,0,0,5700,5600,5600,5500,5300,5300,5000,4600,3900,3200,
				3800,0,0,0,5300,5200,5100,5000,4900,4850,4650,4400,3800,3100,
				4000,0,0,0,0,4850,4750,4650,4550,4450,4350,4150,3700,3000,
				4400,0,0,0,0,4250,4150,4050,3900,3800,3750,3600,3400,2800,
				4800,0,0,0,0,0,3650,3550,3400,3300,3200,3100,2940,2600,
				5200,0,0,0,0,0,0,3100,2970,2870,2770,2670,2530,2300,
				5600,0,0,0,0,0,0,2750,2610,2510,2390,2280,2150,2020,
				6000,0,0,0,0,0,0,0,2310,2190,2060,1950,1820,1690,
				6400,0,0,0,0,0,0,0,0,1900,1780,1670,1530,1390,
				6800,0,0,0,0,0,0,0,0,1660,1530,1420,1270,1110,
				7200,0,0,0,0,0,0,0,0,0,1320,1190,1020,840,
				7600,0,0,0,0,0,0,0,0,0,0,980,780,640,
				8000,0,0,0,0,0,0,0,0,0,0,780,620,490,
				8400,0,0,0,0,0,0,0,0,0,0,0,500,360};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==4)
            {
            	Socot=14;
            	Sohang=36;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,2100,2800,3500,4200,4900,5600,6300,7000,7700,8400,9100,9800,10510,
				550,47400,40000,33000,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				600,44000,38000,33000,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				650,40800,36500,32200,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				700,38100,35000,31500,27500,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				800,33600,33500,30100,26400,23500,20000,16000,13000,11300,9500,8200,6800,5500,
				900,30000,30000,29000,25500,22700,19300,16000,13000,11300,9500,8200,6800,5500,
				1000,27100,27000,26900,24500,21900,18600,15500,13000,11300,9500,8200,6800,5500,
				1100,24700,24600,24500,23500,21100,18000,15000,12500,10900,9500,8200,6800,5500,
				1200,22700,22600,22500,22400,20300,17300,14500,12100,10600,9200,7900,6800,5500,
				1400,19500,19400,19300,19200,19000,16100,13500,11400,10000,8700,7400,6400,5500,
				1600,16900,16900,16700,16600,16500,15000,12600,10700,9500,8200,7000,6000,5200,
				1800,14900,14800,14700,14600,14500,13800,11700,10200,9000,7800,6600,5700,4900,
				2000,13200,13100,13000,12900,12800,12700,10900,9700,8600,7500,6300,5500,4600,
				2200,0,11800,11700,11600,11500,11400,10200,9200,8200,7100,6000,5200,4400,
				2400,0,10700,10600,10500,10400,10300,9500,8700,7900,6800,5800,5000,4200,
				2600,0,9800,9700,9600,9400,9400,8900,8200,7600,6500,5600,4700,4000,
				2800,0,0,8900,8800,8600,8600,8500,7800,7300,6200,5300,4500,3800,
				3000,0,0,8100,8000,7900,7900,7800,7500,7000,6000,5100,4400,3700,
				3200,0,0,7500,7400,7300,7200,7100,7000,6800,5800,4900,4200,3500,
				3400,0,0,0,6800,6700,6600,6500,6400,6300,5500,4800,4100,3400,
				3600,0,0,0,6300,6200,6100,6000,5900,5800,5300,4600,3900,3200,
				3800,0,0,0,5800,5700,5600,5600,5400,5300,5100,4400,3800,3100,
				4000,0,0,0,0,5300,5200,5200,5000,4950,4850,4200,3700,3000,
				4400,0,0,0,0,4650,4550,4450,4350,4250,4150,4000,3400,2800,
				4800,0,0,0,0,0,4050,3900,3800,3700,3600,3500,3200,2600,
				5200,0,0,0,0,0,0,3450,3350,3250,3100,3050,2890,2300,
				5600,0,0,0,0,0,0,3100,2940,2840,2720,2610,2470,2200,
				6000,0,0,0,0,0,0,0,2620,2510,2370,2250,2110,1970,
				6400,0,0,0,0,0,0,0,0,2210,2060,1940,1790,1650,
				6800,0,0,0,0,0,0,0,0,1940,1800,1670,1510,1360,
				7200,0,0,0,0,0,0,0,0,0,1570,1420,1260,1100,
				7600,0,0,0,0,0,0,0,0,0,0,1200,1030,850,
				8000,0,0,0,0,0,0,0,0,0,0,1010,810,650,
				8400,0,0,0,0,0,0,0,0,0,0,0,650,520,
				8800,0,0,0,0,0,0,0,0,0,0,0,0,390};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }
        }
    }
    else
    {
        if(Ballas30_90==0)
        {
            if(CW0_56_108_160_180==0)
            {
				
            }

            if(CW0_56_108_160_180==1)
            {
            	
            }

            if(CW0_56_108_160_180==2)
            {
            	
            }

            if(CW0_56_108_160_180==3)
            {
            	Socot=11;
            	Sohang=26;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,3500,4200,4900,5600,6300,7000,7700,8400,9100,9810,
				1200,18900,18800,21500,20400,16500,13700,13100,11100,9900,8400,
				1400,18900,18800,18100,17200,16500,13700,13100,11100,9900,8400,
				1600,16400,16300,15500,14900,14300,13700,13100,11100,9900,8400,
				1800,14300,14200,13600,13000,12500,12000,11500,11100,9900,8400,
				2000,12400,12300,12000,11500,11100,10700,10300,9900,9500,8400,
				2200,10900,10800,10700,10300,9900,9600,9200,8800,8500,8100,
				2400,9600,9500,9400,9300,9000,8700,8300,8000,7700,7400,
				2600,8600,8500,8400,8400,8200,7900,7500,7200,7000,6700,
				2800,7800,7700,7600,7500,7400,7200,6900,6600,6400,6100,
				3000,7100,7000,6900,6800,6800,6600,6300,6000,5800,5500,
				3200,6500,6400,6300,6200,6100,6000,5800,5500,5300,5100,
				3400,0,5900,5700,5700,5600,5500,5300,5100,4900,4650,
				3600,0,5400,5300,5200,5100,5100,4900,4700,4500,4250,
				3800,0,5000,4900,4800,4750,4650,4550,4350,4150,3950,
				4000,0,0,4550,4450,4400,4300,4200,4000,3850,3600,
				4400,0,0,3950,3850,3750,3700,3600,3450,3300,3100,
				4800,0,0,0,3400,3300,3200,3100,2990,2820,2620,
				5200,0,0,0,0,2880,2780,2670,2570,2420,2230,
				5600,0,0,0,0,2550,2430,2310,2200,2060,1890,
				6000,0,0,0,0,0,2130,1990,1880,1740,1570,
				6400,0,0,0,0,0,0,1720,1610,1470,1290,
				6800,0,0,0,0,0,0,1490,1370,1220,1050,
				7200,0,0,0,0,0,0,0,1170,1010,830,
				7600,0,0,0,0,0,0,0,0,830,650,
				8000,0,0,0,0,0,0,0,0,680,510};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==4)
            {
            	Socot=11;
            	Sohang=26;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,3500,4200,4900,5600,6300,7000,7700,8400,9100,9810,
				1400,13300,14900,16800,16200,18000,15000,14300,12200,9900,8400,
				1600,13300,14900,16800,16200,15600,15000,14300,12200,9900,8400,
				1800,13300,14900,14800,14200,13700,13200,12700,12200,9900,8400,
				2000,13300,13200,13100,12600,12200,11700,11300,10800,9700,8400,
				2200,11800,11700,11700,11300,10900,10500,10100,9800,9400,8100,
				2400,10500,10400,10300,10200,9900,9500,9200,8800,8500,7900,
				2600,9400,9300,9200,9200,9000,8700,8300,8000,7700,7400,
				2800,8500,8400,8300,8200,8200,7900,7600,7300,7100,6800,
				3000,7800,7600,7500,7500,7400,7300,7000,6700,6500,6200,
				3200,7100,7000,6900,6800,6700,6700,6400,6200,6000,5700,
				3400,0,6400,6300,6200,6200,6100,5900,5700,5500,5200,
				3600,0,6000,5800,5800,5700,5600,5500,5300,5100,4850,
				3800,0,5500,5400,5300,5200,5200,5100,4900,4700,4450,
				4000,0,0,5000,4950,4850,4800,4700,4550,4350,4150,
				4400,0,0,4400,4300,4200,4100,4000,3950,3750,3550,
				4800,0,0,0,3900,3650,3600,3500,3400,3250,3050,
				5200,0,0,0,0,3250,3150,3050,2950,2830,2630,
				5600,0,0,0,0,2880,2760,2650,2550,2440,2270,
				6000,0,0,0,0,0,2450,2320,2210,2090,1930,
				6400,0,0,0,0,0,0,2020,1910,1800,1630,
				6800,0,0,0,0,0,0,1770,1660,1540,1360,
				7200,0,0,0,0,0,0,0,1430,1310,1140,
				7600,0,0,0,0,0,0,0,0,1120,930,
				8000,0,0,0,0,0,0,0,0,940,750,
				8400,0,0,0,0,0,0,0,0,0,610};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }
        }

        if(Ballas30_90==1)
        {
            if(CW0_56_108_160_180==0)
            {

            }

            if(CW0_56_108_160_180==1)
            {

            }

            if(CW0_56_108_160_180==2)
            {

            }

            if(CW0_56_108_160_180==3)
            {
            	Socot=11;
            	Sohang=30;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,3500,4200,4900,5600,6300,7000,7700,8400,9100,9810,
				900,29400,26400,21900,21800,18200,15200,14300,12200,9900,8400,
				1000,26500,26400,21900,21800,18200,15200,14300,12200,9900,8400,
				1100,24100,24000,21900,21800,18200,15200,14300,12200,9900,8400,
				1200,22100,22000,21900,21800,18200,15200,14300,12200,9900,8400,
				1400,18900,18800,18700,18600,18200,15200,14300,12200,9900,8400,
				1600,16400,16300,16200,16100,15800,15200,14300,12200,9900,8400,
				1800,14300,14200,14100,14100,13900,13400,12900,12200,9900,8400,
				2000,12700,12600,12500,12400,12400,11900,11500,11000,9700,8400,
				2200,11400,11300,11200,11100,11000,10700,10300,9900,9500,8100,
				2400,10300,10200,10100,10000,9900,9700,9300,9000,8700,7900,
				2600,9400,9300,9200,9100,9000,8800,8500,8200,7900,7600,
				2800,8600,8500,8400,8300,8200,8100,7700,7500,7200,6900,
				3000,7900,7700,7600,7600,7500,7400,7100,6800,6600,6300,
				3200,7200,7100,7000,6900,6900,6800,6600,6300,6100,5800,
				3400,0,6500,6400,6300,6300,6200,6100,5800,5600,5300,
				3600,0,6000,5900,5800,5800,5700,5600,5400,5200,4950,
				3800,0,5600,5500,5400,5300,5300,5200,5000,4800,4550,
				4000,0,0,5100,5000,4950,4850,4750,4650,4450,4200,
				4400,0,0,4450,4350,4250,4200,4100,4000,3850,3650,
				4800,0,0,0,3850,3750,3650,3550,3450,3350,3150,
				5200,0,0,0,0,3300,3200,3100,2980,2890,2700,
				5600,0,0,0,0,2930,2820,2710,2580,2480,2300,
				6000,0,0,0,0,0,2500,2370,2240,2120,1940,
				6400,0,0,0,0,0,0,2080,1940,1820,1630,
				6800,0,0,0,0,0,0,1820,1680,1540,1350,
				7200,0,0,0,0,0,0,0,1450,1300,1100,
				7600,0,0,0,0,0,0,0,0,1090,870,
				8000,0,0,0,0,0,0,0,0,890,680,
				8400,0,0,0,0,0,0,0,0,0,550};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }

            if(CW0_56_108_160_180==4)
            {
            	Socot=11;
            	Sohang=30;
            	uint16_t Bangtai[Sohang*Socot]=
				{0,3500,4200,4900,5600,6300,7000,7700,8400,9100,9810,
				900,30300,27200,22600,22600,18400,16400,14300,12200,9900,8400,
				1000,27400,27200,22600,22600,18400,16400,14300,12200,9900,8400,
				1100,24900,24800,22600,22600,18400,16400,14300,12200,9900,8400,
				1200,22800,22700,22600,22600,18400,16400,14300,12200,9900,8400,
				1400,19500,19400,19300,19200,18400,16400,14300,12200,9900,8400,
				1600,17200,17100,17000,16800,16700,16400,14300,12200,9900,8400,
				1800,15000,14900,14800,14700,14600,14500,14000,12200,9900,8400,
				2000,13300,13200,13100,13000,12900,12900,12500,12000,9700,8400,
				2200,11900,11800,11700,11600,11600,11500,11200,10800,9500,8100,
				2400,10800,10700,10600,10500,10400,10400,10200,9800,9200,7900,
				2600,9900,9700,9600,9500,9500,9400,9300,8900,8600,7700,
				2800,9100,8900,8800,8700,8600,8600,8500,8200,7900,7400,
				3000,8400,8200,8100,8000,7900,7900,7800,7500,7300,7000,
				3200,7800,7600,7500,7400,7300,7200,7100,6900,6700,6400,
				3400,0,7100,6900,6900,6800,6700,6600,6400,6200,5900,
				3600,0,6600,6400,6400,6300,6200,6100,5900,5700,5500,
				3800,0,6100,6000,5900,5800,5800,5600,5500,5300,5100,
				4000,0,0,5600,5500,5400,5300,5200,5100,4950,4750,
				4400,0,0,4900,4800,4700,4600,4500,4350,4300,4100,
				4800,0,0,0,4250,4100,4050,3950,3750,3700,3500,
				5200,0,0,0,0,3650,3550,3450,3300,3200,3000,
				5600,0,0,0,0,3150,3150,3000,2860,2760,2580,
				6000,0,0,0,0,0,2810,2660,2500,2390,2210,
				6400,0,0,0,0,0,0,2350,2190,2060,1880,
				6800,0,0,0,0,0,0,2090,1910,1780,1590,
				7200,0,0,0,0,0,0,0,1680,1530,1340,
				7600,0,0,0,0,0,0,0,0,1310,1100,
				8000,0,0,0,0,0,0,0,0,1110,890,
				8400,0,0,0,0,0,0,0,0,0,700};
				memcpy(LT, Bangtai, sizeof(Bangtai));
            }
        }
    }
}


float bytesToFloat(uint16_t *bytes) 
{
    float f;
    uint16_t *f_ptr = (uint16_t *) &f;
        f_ptr[1] = bytes[1];
        f_ptr[0] = bytes[0];
    return f;
}


void Float_to_Register(float variable, uint8_t register0, uint8_t register1)
{
    uint16_t temp[2] 
    {
        ((uint16_t*)&variable)[0],
        ((uint16_t*)&variable)[1]
    };
    node.setTransmitBuffer(register0-1, temp[0]);
    node.setTransmitBuffer(register1-1, temp[1]);
}

void Word_to_Register(uint16_t variable,uint8_t register2)
{
    node.setTransmitBuffer(register2-1, variable);
}


///////////////////// RS485 ///////////////////
void preTransmission()
{
  digitalWrite(DE_pin, 1);
//   digitalWrite(Led1, !digitalRead(Led1));
}

void postTransmission()
{
  digitalWrite(DE_pin, 0);
  digitalWrite(Led1, !digitalRead(Led1));
}
///////////////////// RS485 ///////////////////

uint16_t page_old;
void Task_HMI_code( void * pvParameters )
{
    //// Khoi tao cho RS485 ////
  pinMode(DE_pin, OUTPUT);
  digitalWrite(DE_pin, LOW); // Trang thai nhan
  SerialRS485.begin(115200);
  node.begin(2, SerialRS485);
  node.preTransmission(preTransmission);
  node.postTransmission(postTransmission);
    //// Khoi tao cho RS485 ////

  for(;;)
  {
    if (node.readHoldingRegisters(Screen_no_status_addr, 1) == node.ku8MBSuccess)
    {
        page_old=node.getResponseBuffer(0);
        if(page_old != Page_status)
        {
            Page_status=page_old;
            // Trigger_Page=1;
            node.writeSingleCoil(Trigger_Page_addr,1);
            Serial.println("Chuyen trang");
        }
        
        node.clearResponseBuffer();
        result_comunication_HMI=1;
    }
    if(node.readCoils(Trigger_Page_addr,1) == node.ku8MBSuccess)
    {
        Trigger_Page=node.getResponseBuffer(0);
        node.clearResponseBuffer();
    }

    switch(Page_status)
    {
        case 1: // Dang o trang Logo
        {
            node.writeSingleCoil(Multi_Loadtable_State_addr,Multi_Loadtable_State);
            node.writeSingleRegister(Device_addr,device_type);

            if((device_type==2) ||(device_type==4))
            {
                node.writeSingleCoil(33,1);
            }
            else
            {
                node.writeSingleCoil(33,0);
            }

            if((device_type==1) ||(device_type==3))
            {
                node.writeSingleCoil(63,1);
            }
            else
            {
                node.writeSingleCoil(63,0);
            }

            Word_to_Register(Load_alarm_set,1);
            Word_to_Register(Load_alarm_max,2);
            result = node.writeMultipleRegisters(Load_alarm_set_addr, 2); // Gui bien len man hinh 1 lan dau load trang
            node.clearTransmitBuffer();
            Float_to_Register(Load_table_value,1,2);
            node.writeMultipleRegisters(Load_table_value_addr,2);   // Gui bien len man hinh
            node.clearTransmitBuffer();

            node.writeSingleRegister(40555,CW0_56_108_160_180);
            node.clearTransmitBuffer();

            node.writeSingleCoil(71,Ballas30_90);
            node.clearTransmitBuffer();
            node.writeSingleCoil(74,L_LD);
            node.clearTransmitBuffer();

            Capnhatbangtai();

            switch(device_type)
            {
                case(0):
                case(1):    // Chuyen trang Home banh Lop
                case(3):
                case(5):
                {
                    Trigger_Main_Aux=1;
                    node.writeSingleCoil(20,1); // Clear Trigger_Main_Aux
                    result = node.writeSingleRegister(Screen_no_control_addr,0x02);
                    // Serial.println("Chuyen trang banh lop");
                }
                break;

                case(2):    // Chuyen trang Home banh Xich
                case(4):
                {   
                    Trigger_Main_Aux=1;
                    node.writeSingleCoil(20,1); // Clear Trigger_Main_Aux
                    result = node.writeSingleRegister(Screen_no_control_addr,0x03);
                    // Serial.println("Chuyen trang banh xich");
                }
                break;
            }
        }
        break;

        case 2: // Dang o trang Banh lop
        {
            if(node.readCoils(19,3) == node.ku8MBSuccess)  // Read Trigger_Cab_Input
            {
                Trigger_Loadtable=node.getResponseBuffer(0) & bit(0);
                Trigger_Main_Aux=node.getResponseBuffer(0) & bit(1);
                Trigger_Cab_Input=node.getResponseBuffer(0) & bit(2);
                node.clearResponseBuffer();
            }

            if(DigitalInput_1==1)               // Hien thi ngat cap len man hinh
            {
                node.writeSingleCoil(31,0);
            }
            else
            {
                node.writeSingleCoil(31,1);
            }

            node.clearResponseBuffer();
            if(DigitalInput_2==1)               // Hien thi ngat cap len man hinh
            {
                node.writeSingleCoil(72,0);
            }
            else
            {
                node.writeSingleCoil(72,1);
            }
            node.clearResponseBuffer();
            if(DigitalInput_3==1)               // Hien thi ngat cap len man hinh
            {
                node.writeSingleCoil(73,0);
            }
            else
            {
                node.writeSingleCoil(73,1);
            }
            node.clearResponseBuffer();

            if(Trigger_Main_Aux==1)
            {
                if(node.readCoils(35, 1) == node.ku8MBSuccess)
                {
                    Main_Aux=node.getResponseBuffer(0);
                    node.clearResponseBuffer();
                    preferences.putBool("Main_Aux",Main_Aux);
                }
                node.writeSingleCoil(20,0); // Clear Trigger_Main_Aux
                // Serial.print("Vua chon cap: "); Serial.println(Main_Aux);        /// 1 La cap phu, 0 la cap chinh
            }

            if(Trigger_Cab_Input==1)
            {
                node.readHoldingRegisters(Cab_number_addr, 1);
                if(Main_Aux==1)
                {
                    Cab_aux_number=node.getResponseBuffer(0);
                    preferences.putShort("Cab_aux_num",Cab_aux_number);
                    // Serial.print("So soi cap phu vua nhap: "); Serial.println(Cab_aux_number);
                }
                else
                {
                    Cab_main_number=node.getResponseBuffer(0);
                    preferences.putShort("Cab_main_num",Cab_main_number);
                    // Serial.print("So soi cap chinh vua nhap: "); Serial.println(Cab_main_number);                    
                }
                node.clearResponseBuffer();
                node.writeSingleCoil(21,0); // Clear Trigger_Cab_Input
            }

            if(Trigger_Loadtable==1)
            {
                uint16_t temp[2];
                node.readHoldingRegisters(Load_table_value_addr, 2);
                temp[0]=node.getResponseBuffer(0);
                temp[1]=node.getResponseBuffer(1);
                node.clearResponseBuffer();
                Load_table_value=bytesToFloat(&temp[0]);

                preferences.putFloat("LT_value",Load_table_value);
                node.clearResponseBuffer();
                Trigger_LT=1;
                node.writeSingleCoil(19,0); // Clear Trigger_Loadtable
            }

            if(Main_Aux==1)
                Cab_number = Cab_aux_number;
            else
                Cab_number = Cab_main_number;

            Float_to_Register(Angle_value,1,2);
            Float_to_Register(Length_value,3,4);
            if(W_value<0)
            {
                Float_to_Register(0-W_value,5,6);
            }
            else
            {
                Float_to_Register(W_value,5,6);
            }
            Float_to_Register(MaxW_value,7,8);
            Word_to_Register(Cab_number,9);
            //Word_to_Register(Load_stt,10);
            Float_to_Register(R_value,11,12);
            Float_to_Register(H_value,13,14);
            Word_to_Register(Loadpercent,15);
            result = node.writeMultipleRegisters(Angle_value_addr, 15);   // Gui bien len man hinh
            node.clearTransmitBuffer();

            uint8_t temp1;
            temp1=((!Stt_LoadSet)<<1) | (!Stt_LoadHi);
            node.setTransmitBuffer(0, temp1);
            result = node.writeMultipleCoils(56, 2);
            node.clearTransmitBuffer();

            uint8_t temp;
            temp=((!Stt_AngleHi)<<6) | ((!Stt_AngleSet)<<5) | ((!Stt_LengthHi)<<3) | ((!Stt_LengthLow)<<2) | ((!Stt_LoadHi)<<1) | (!Stt_LoadSet);
            node.setTransmitBuffer(0, temp);
            result = node.writeMultipleCoils(11, 7);
            node.clearTransmitBuffer();

        }
        break;

        case 3: // Dang o trang Banh xich
        {
            if(node.readCoils(18,4) == node.ku8MBSuccess)  // Read Trigger_Cab_Input
            {
                Trigger_Length_nhapmanhinh=node.getResponseBuffer(0) & bit(0);
                Trigger_Loadtable=node.getResponseBuffer(0) & bit(1);
                Trigger_Main_Aux=node.getResponseBuffer(0) & bit(2);
                Trigger_Cab_Input=node.getResponseBuffer(0) & bit(3);
                node.clearResponseBuffer();
            }

            /////////// DIGITAL INPUT ///////////
            if(DigitalInput_1==1)               // Hien thi ngat cap len man hinh
            {
                node.writeSingleCoil(31,0);
            }
            else
            {
                node.writeSingleCoil(31,1);
            }
            node.clearResponseBuffer();
            if(DigitalInput_2==1)               // Hien thi ngat cap len man hinh
            {
                node.writeSingleCoil(72,0);
            }
            else
            {
                node.writeSingleCoil(72,1);
            }
            node.clearResponseBuffer();
            if(DigitalInput_3==1)               // Hien thi ngat cap len man hinh
            {
                node.writeSingleCoil(73,0);
            }
            else
            {
                node.writeSingleCoil(73,1);
            }
            node.clearResponseBuffer();
            /////////// DIGITAL INPUT ///////////
            
            if(Trigger_Length_nhapmanhinh==1)
            {   uint16_t temp[2];
                node.readHoldingRegisters(Length_banhxich_addr, 2);
                temp[0]=node.getResponseBuffer(0);
                temp[1]=node.getResponseBuffer(1);
                node.clearResponseBuffer();
                Length_xich_nhap=bytesToFloat(&temp[0]);
                preferences.putFloat("L_xich",Length_xich_nhap);
                Length_value=Length_xich_nhap;
                Serial.print("Gia tri vua nhap: ");Serial.println(Length_value);
                node.writeSingleCoil(18,0); // Clear Trigger_Loadtable
            }


            if(Trigger_Main_Aux==1)
            {
                node.readCoils(35, 1);
                Main_Aux=node.getResponseBuffer(0);
                node.clearResponseBuffer();
                preferences.putBool("Main_Aux",Main_Aux);
                node.writeSingleCoil(20,0); // Clear Trigger_Main_Aux
                // Serial.print("Vua chon cap: "); Serial.println(Main_Aux);        /// 1 La cap phu, 0 la cap chinh
            }

            if(Trigger_Cab_Input==1)
            {
                node.readHoldingRegisters(Cab_number_addr, 1);
                if(Main_Aux==1)
                {
                    Cab_aux_number=node.getResponseBuffer(0);
                    preferences.putShort("Cab_aux_num",Cab_aux_number);
                    // Serial.print("So soi cap phu vua nhap: "); Serial.println(Cab_aux_number);
                }
                else
                {
                    Cab_main_number=node.getResponseBuffer(0);
                    preferences.putShort("Cab_main_num",Cab_main_number);
                    // Serial.print("So soi cap chinh vua nhap: "); Serial.println(Cab_main_number);                    
                }
                node.clearResponseBuffer();
                node.writeSingleCoil(21,0); // Clear Trigger_Cab_Input
            }

            if(Trigger_Loadtable==1)
            {   uint16_t temp[2];
                node.readHoldingRegisters(Load_table_value_addr, 2);
                temp[0]=node.getResponseBuffer(0);
                temp[1]=node.getResponseBuffer(1);
                node.clearResponseBuffer();
                Load_table_value=bytesToFloat(&temp[0]);

                preferences.putFloat("LT_value",Load_table_value);
                node.clearResponseBuffer();
                Trigger_LT=1;
                node.writeSingleCoil(19,0); // Clear Trigger_Loadtable
            }

            if(Main_Aux==1)
                Cab_number = Cab_aux_number;
            else
                Cab_number = Cab_main_number;

            Float_to_Register(Angle_value,1,2);
            Float_to_Register(Length_value,3,4);

            if(W_value<0)
            {
                Float_to_Register(0-W_value,5,6);
            }
            else
            {
                Float_to_Register(W_value,5,6);
            }

            Float_to_Register(MaxW_value,7,8);
            Word_to_Register(Cab_number,9);
            Float_to_Register(R_value,11,12);
            Float_to_Register(H_value,13,14);
            Word_to_Register(Loadpercent,15);
            result = node.writeMultipleRegisters(Angle_value_addr, 15);   // Gui bien len man hinh
            node.clearTransmitBuffer();


            uint8_t temp1;
            temp1=((!Stt_LoadSet)<<1) | (!Stt_LoadHi);
            node.setTransmitBuffer(0, temp1);
            result = node.writeMultipleCoils(56, 2);
            node.clearTransmitBuffer();

            uint8_t temp;
            temp=((!Stt_AngleHi)<<6) | ((!Stt_AngleSet)<<5) | ((!Stt_LengthHi)<<3) | ((!Stt_LengthLow)<<2) | ((!Stt_LoadHi)<<1) | (!Stt_LoadSet);
            node.setTransmitBuffer(0, temp);
            result = node.writeMultipleCoils(11, 7);
            node.clearTransmitBuffer();

            Float_to_Register(P1_value,1,2);
            result = node.writeMultipleRegisters(P_main_value_addr, 2); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();

            if(node.readCoils(75,5) == node.ku8MBSuccess)  // Read Trigger_Cab_Input
            {
                Trigger_L_LD=node.getResponseBuffer(0) & bit(0);
                Trigger_CentralBallas=node.getResponseBuffer(0) & bit(1);
                Trigger_CW=node.getResponseBuffer(0) & bit(2);
                Trigger_Pump=node.getResponseBuffer(0) & bit(3);
                Trigger_Bypass=node.getResponseBuffer(0) & bit(4);
                node.clearResponseBuffer();
            }

            if(Trigger_Pump==1)
            {   
                node.readCoils(80, 1);
                Pump=node.getResponseBuffer(0);
                node.clearResponseBuffer();
                if(Pump==0)
                {
                    Serial.print("Tat bom");
                    Stt_AngleHi=1;
                }
                else
                {
                    Stt_AngleHi=0;
                    Serial.print("Mo bom");
                }
                node.writeSingleCoil(78,0); // Clear Trigger_Loadtable
            }

            if(Trigger_Bypass==1)
            {   
                node.readCoils(81, 1);
                Bypass=node.getResponseBuffer(0);
                node.clearResponseBuffer();
                if(Bypass==0)
                {
                    Serial.print("Ngat");
                    Stt_AngleSet=0;
                }
                else
                {
                    // if(Loadpercent<130)
                    // {
                        Stt_AngleSet=1;
                        Serial.print("Bypass");
                    // }
                }
                node.writeSingleCoil(79,0); // Clear Trigger_Loadtable
            }


            if(Trigger_L_LD==1)
            {   
                node.readCoils(74, 1);
                L_LD=node.getResponseBuffer(0);
                node.clearResponseBuffer();
                preferences.putBool("L_LD",L_LD);
                if(L_LD==0)
                {
                    Serial.print("Chon can L");
                }
                else
                {
                    Serial.print("Chon can LD");
                }
                Capnhatbangtai();
                node.writeSingleCoil(75,0); // Clear Trigger_Loadtable
            }

            if(Trigger_CentralBallas==1)
            {   
                node.readCoils(71, 1);
                Ballas30_90=node.getResponseBuffer(0);
                node.clearResponseBuffer();
                preferences.putBool("Ballas",Ballas30_90);
                if(Ballas30_90==0)
                {
                    Serial.print("Chon Ballas 30t");
                }
                else
                {
                    Serial.print("Chon Ballas 90t");
                }
                Capnhatbangtai();
                node.writeSingleCoil(76,0); // Clear Trigger_Loadtable
            }

            if(Trigger_CW==1)
            {   
                node.readHoldingRegisters(40555, 1);
                CW0_56_108_160_180=node.getResponseBuffer(0);
                node.clearResponseBuffer();
                preferences.putShort("CW",CW0_56_108_160_180);
                if(CW0_56_108_160_180==0)
                {
                    Serial.print("Chon CW = 0 t");
                }
                else if(CW0_56_108_160_180==1)
                {
                    Serial.print("Chon CW = 56 t");
                }
                else if(CW0_56_108_160_180==2)
                {
                    Serial.print("Chon CW = 108 t");
                }
                else if(CW0_56_108_160_180==3)
                {
                    Serial.print("Chon CW = 160 t");
                }
                else
                {
                    Serial.print("Chon CW = 180 t");
                }
                Capnhatbangtai();
                node.writeSingleCoil(77,0); // Clear Trigger_Loadtable
            }

        }
        break;

        case 4: // Dang o trang Dang nhap
        {

        }
        break;

        case 5: // Dang o trang Cai dat Admin
        {
            Trigger_Customer=0;
            node.writeSingleCoil(64,0); // Trigger Customer
        }
        break;

        case 6: // Dang o trang Cai dat Angle
        {   
            if(Trigger_Page==1)
            {
                Float_to_Register(Angle_value_calib0,1,2);
                Float_to_Register(Angle_value_calib1,3,4);
                result = node.writeMultipleRegisters(Angle_value_calib0_addr, 4);   // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                Word_to_Register(Angle_alarm_min,1);
                Word_to_Register(Angle_alarm_set,2);
                Word_to_Register(Angle_alarm_max,3);
                result = node.writeMultipleRegisters(Angle_alarm_min_addr, 3);   // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                Word_to_Register(Angle_raw_calib0,1);
                Word_to_Register(Angle_raw_calib1,2);
                result = node.writeMultipleRegisters(Angle_raw_calib0_addr, 2);   // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }
            if(node.readCoils(52,2) == node.ku8MBSuccess)
            {
                Trigger_Setting_Angle_calib0=node.getResponseBuffer(0) & bit(0);
                Trigger_Setting_Angle_calib1=node.getResponseBuffer(0) & bit(1);
                node.clearResponseBuffer();
            }

            if(node.readCoils(24,1) == node.ku8MBSuccess)
            {
                Trigger_Setting_Angle=node.getResponseBuffer(0);
                node.clearResponseBuffer();
            }

            if(Trigger_Setting_Angle_calib0==1)         // Cài đặt Calib 0
            {
                uint16_t temp[2];
                if (node.readHoldingRegisters(Angle_value_calib0_addr, 2) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    Angle_value_calib0=bytesToFloat(&temp[0]);
                    Angle_raw_calib0=Angle_raw;

                    preferences.putFloat("A1",Angle_value_calib0);
                    preferences.putShort("A3",Angle_raw_calib0);

                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(52,0);      // Clear Trigger_Setting_Angle
                    //Serial.print("Angle_value_calib0 "); Serial.println(Angle_value_calib0,2);
            }

            if(Trigger_Setting_Angle_calib1==1)     // Cài đặt Calib 1
            {
                uint16_t temp[2];
                if (node.readHoldingRegisters(Angle_value_calib1_addr, 2) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    Angle_value_calib1=bytesToFloat(&temp[0]);
                    Angle_raw_calib1=Angle_raw;
                    preferences.putFloat("A2",Angle_value_calib1);
                    preferences.putShort("A4",Angle_raw_calib1);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(53,0);      // Clear Trigger_Setting_Angle
                    //Serial.print("Angle_value_calib1 "); Serial.println(Angle_value_calib1,2);
            }

            if(Trigger_Setting_Angle==1)     // Cài đặt Alarm Angle
            {
                if (node.readHoldingRegisters(Angle_alarm_min_addr, 3) == node.ku8MBSuccess)
                {
                    Angle_alarm_min=node.getResponseBuffer(0);
                    Angle_alarm_set=node.getResponseBuffer(1);
                    Angle_alarm_max=node.getResponseBuffer(2);
                    node.clearResponseBuffer();

                    preferences.putShort("A5",Angle_alarm_min);
                    preferences.putShort("A6",Angle_alarm_set);
                    preferences.putShort("A7",Angle_alarm_max);

                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(24,0);      // Clear Trigger_Setting_Angle
                    //Serial.print("Angle_alarm_min "); Serial.println(Angle_alarm_min);
                    //Serial.print("Angle_alarm_set "); Serial.println(Angle_alarm_set);
                    //Serial.print("Angle_alarm_max "); Serial.println(Angle_alarm_max);
            }

            result = node.writeSingleRegister(Angle_raw_addr,Angle_raw); // Gui bien len man hinh lien tuc
            Float_to_Register(Angle_value,1,2);
            result = node.writeMultipleRegisters(Angle_value_addr, 2); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();
        }
        break;

        case 7: // Dang o trang Cai dat Length
        {   
            if(Trigger_Page==1)
            {
                Float_to_Register(Length_value_calib0,1,2);
                Float_to_Register(Length_value_calib1,3,4);
                result = node.writeMultipleRegisters(Length_value_calib0_addr, 4);   // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                Float_to_Register(Length_alarm_min,1,2);
                Float_to_Register(Length_alarm_set,3,4);
                Float_to_Register(Length_alarm_max,5,6);
                result = node.writeMultipleRegisters(Length_alarm_min_addr, 6);   // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                Word_to_Register(Length_raw_calib0,1);
                Word_to_Register(Length_raw_calib1,2);
                result = node.writeMultipleRegisters(Length_raw_calib0_addr, 2);   // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }

            if(node.readCoils(54,2) == node.ku8MBSuccess)
            {
                Trigger_Setting_Length_calib0=node.getResponseBuffer(0) & bit(0);
                Trigger_Setting_Length_calib1=node.getResponseBuffer(0) & bit(1);
                node.clearResponseBuffer();
            }

            if(node.readCoils(25,1) == node.ku8MBSuccess)
            {
                Trigger_Setting_Length=node.getResponseBuffer(0);
                node.clearResponseBuffer();
            }

            if(Trigger_Setting_Length_calib0==1)
            {
                uint16_t temp[2];
                if (node.readHoldingRegisters(Length_value_calib0_addr, 2) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    Length_value_calib0=bytesToFloat(&temp[0]);
                    Length_raw_calib0=Length_raw;

                    preferences.putFloat("L1",Length_value_calib0);
                    preferences.putShort("L3",Length_raw_calib0);

                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(54,0);
                    //Serial.print("Length_value_calib0 "); Serial.println(Length_value_calib0,2);
            }

            if(Trigger_Setting_Length_calib1==1)
            {
                uint16_t temp[2];
                if (node.readHoldingRegisters(Length_value_calib1_addr, 2) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    Length_value_calib1=bytesToFloat(&temp[0]);
                    Length_raw_calib1=Length_raw;

                    preferences.putFloat("L2",Length_value_calib1);
                    preferences.putShort("L4",Length_raw_calib1);

                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(55,0);
                    //Serial.print("Length_value_calib1 "); Serial.println(Length_value_calib1,2);
            }

            if(Trigger_Setting_Length==1)
            {   uint16_t temp[6];
                if (node.readHoldingRegisters(Length_alarm_min_addr, 6) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    temp[2]=node.getResponseBuffer(2);
                    temp[3]=node.getResponseBuffer(3);
                    temp[4]=node.getResponseBuffer(4);
                    temp[5]=node.getResponseBuffer(5);
                    node.clearResponseBuffer();
                    Length_alarm_min=bytesToFloat(&temp[0]);
                    Length_alarm_set=bytesToFloat(&temp[2]);
                    Length_alarm_max=bytesToFloat(&temp[4]);
                    
                    preferences.putFloat("L5",Length_alarm_min);
                    preferences.putFloat("L6",Length_alarm_set);
                    preferences.putFloat("L7",Length_alarm_max);

                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(25,0);      // Clear Trigger_Setting_Length
                    //Serial.print("Length_alarm_min "); Serial.println(Length_alarm_min);
                    //Serial.print("Length_alarm_set "); Serial.println(Length_alarm_set);
                    //Serial.print("Length_alarm_max "); Serial.println(Length_alarm_max);
            }

            result = node.writeSingleRegister(Length_raw_addr,Length_raw); // Gui bien len man hinh lien tuc
            Float_to_Register(Length_value,1,2);
            result = node.writeMultipleRegisters(Length_value_addr, 2); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();
        }
        break;

        case 8: // Dang o trang Set Device
        {   
            if(Trigger_Page==1)
            {
                node.writeSingleRegister(Device_addr,device_type);  // Gui bien len man hinh 1 lan dau load trang
                node.writeSingleCoil(Multi_Loadtable_State_addr,Multi_Loadtable_State);
                node.writeSingleCoil(Trigger_Page_addr,0);          // Clear Trigger Page
            }
            if(node.readCoils(26,1) == node.ku8MBSuccess)
            {
                Trigger_Setting_Device=node.getResponseBuffer(0);
                node.clearResponseBuffer();
            }

            if(Trigger_Setting_Device==1)
            {   
                if (node.readHoldingRegisters(Device_addr, 1) == node.ku8MBSuccess)
                {
                    
                    device_type=node.getResponseBuffer(0);
                    if(device_type>5)
                    {
                        device_type=1;
                    }
                    node.clearResponseBuffer();
                    preferences.putUChar("DT",device_type);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                }

                if(node.readCoils(27,1) == node.ku8MBSuccess)
                {
                    Multi_Loadtable_State=node.getResponseBuffer(0);
                    preferences.putBool("LTB_state",Multi_Loadtable_State);
                    node.clearResponseBuffer();
                }
                    node.writeSingleCoil(26,0);      // Clear Trigger_Setting_Length
                    //Serial.print("Device_type "); Serial.println(device_type);
                    //Serial.print("Multi_Loadtable_State "); Serial.println(Multi_Loadtable_State);
            }
        }
        break;

        case 9: // Dang o trang Set Load
        {   
            if(Trigger_Page==1)
            {
                Word_to_Register(Load_alarm_set,1);
                Word_to_Register(Load_alarm_max,2);
                result = node.writeMultipleRegisters(Load_alarm_set_addr, 2); // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                Float_to_Register(T0_value,1,2);
                Float_to_Register(T0_P_main,3,4);
                Float_to_Register(T0_P_aux,5,6);
                Float_to_Register(T0_Length,7,8);
                Float_to_Register(T0_Angle,9,10);
                result = node.writeMultipleRegisters(T0_value_addr, 10); // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }

            if(node.readCoils(28,2) == node.ku8MBSuccess)
            {
                Set_load_0=node.getResponseBuffer(0) & bit(0);
                Trigger_Setting_Load=node.getResponseBuffer(0) & bit(1);
                node.clearResponseBuffer();
            }

            if(Set_load_0==1)   // Bắt đầu set Load 0, quan trọng.......
            {
                flag_setLoad0_Whell=1;
                node.writeSingleCoil(28,0);
                node.writeSingleCoil(Trigger_Page_addr,1);
            }

            if(Trigger_Setting_Load==1)
            {
                if (node.readHoldingRegisters(Load_alarm_set_addr, 2) == node.ku8MBSuccess)
                {
                    Load_alarm_set=node.getResponseBuffer(0);
                    Load_alarm_max=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    preferences.putShort("LoadS",Load_alarm_set);
                    preferences.putShort("LoadM",Load_alarm_max);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(29,0);      // Clear Trigger_Setting_Load
            }

            Float_to_Register(Angle_value,1,2);
            Float_to_Register(Length_value,3,4);
            Float_to_Register(W_value,5,6);
            result = node.writeMultipleRegisters(Angle_value_addr, 6); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();

            Float_to_Register(P_main_value,1,2);
            Float_to_Register(P_aux_value,3,4);
            result = node.writeMultipleRegisters(P_main_value_addr, 4); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();
        }
        break;

        case 10: // Dang o trang Cai dat Press
        {   
            if(Trigger_Page==1)
            {
                Word_to_Register(P1_range,1);
                Word_to_Register(P2_range,2);
                Word_to_Register(P3_range,3);
                Word_to_Register(P4_range,4);
                Word_to_Register(P5_range,5);
                Word_to_Register(P_main_select,6);
                Word_to_Register(P_aux_select,7);
                result = node.writeMultipleRegisters(P1_range_addr, 7);   // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }

            if(node.readCoils(30,1) == node.ku8MBSuccess)
            {
                Trigger_Setting_Press=node.getResponseBuffer(0);
                node.clearResponseBuffer();
            }

            if(Trigger_Setting_Press==1)     // Cài đặt Alarm Press
            {
                if (node.readHoldingRegisters(P1_range_addr, 7) == node.ku8MBSuccess)
                {
                    P1_range=node.getResponseBuffer(0);
                    P2_range=node.getResponseBuffer(1);
                    P3_range=node.getResponseBuffer(2);
                    P4_range=node.getResponseBuffer(3);
                    P5_range=node.getResponseBuffer(4);
                    P_main_select=node.getResponseBuffer(5);
                    P_aux_select=node.getResponseBuffer(6);
                    node.clearResponseBuffer();
                    preferences.putShort("P1",P1_range);
                    preferences.putShort("P2",P2_range);
                    preferences.putShort("P3",P3_range);
                    preferences.putShort("P4",P4_range);
                    preferences.putShort("P5",P5_range);
                    preferences.putShort("P6",P_main_select);
                    preferences.putShort("P7",P_aux_select);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(30,0);      // Clear Trigger_Setting_Press
            }
            Word_to_Register(P_main_raw,1);
            Word_to_Register(P_aux_raw,2);
            Word_to_Register(P1_raw,3);
            Word_to_Register(P2_raw,4);
            Word_to_Register(P3_raw,5);
            Word_to_Register(P4_raw,6);
            Word_to_Register(P5_raw,7);
            result = node.writeMultipleRegisters(P_main_raw_addr, 7);   // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();

            Float_to_Register(P_main_value,1,2);
            Float_to_Register(P_aux_value,3,4);
            Float_to_Register(P1_value,5,6);
            Float_to_Register(P2_value,7,8);
            Float_to_Register(P3_value,9,10);
            Float_to_Register(P4_value,11,12);
            Float_to_Register(P5_value,13,14);
            result = node.writeMultipleRegisters(P_main_value_addr, 14); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();
        }
        break;

        case 11: // Dang o trang Cai dat Other
        {   
            if(Trigger_Page==1)
            {
                Float_to_Register(Parar,1,2);
                Float_to_Register(Parah,3,4);
                Float_to_Register(ParaCabW,5,6);
                Float_to_Register(Paraa,7,8);
                Float_to_Register(Parab,9,10);
                Float_to_Register(Parac,11,12);
                Float_to_Register(Parad,13,14);
                Float_to_Register(ParaE,15,16);
                Float_to_Register(Parag,17,18);
                Float_to_Register(Paran,19,20);
                Float_to_Register(ParaK1,21,22);
                Float_to_Register(ParaK2,23,24);
                Float_to_Register(ParaK3,25,26);
                Float_to_Register(ParaK4,27,28);
                result = node.writeMultipleRegisters(Parar_addr, 28);   // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }
            if(node.readCoils(32,1) == node.ku8MBSuccess)
            {
                Trigger_Setting_Other=node.getResponseBuffer(0);
                node.clearResponseBuffer();
            }

            if(Trigger_Setting_Other==1)     // Cài đặt Setting Other
            {   uint16_t temp[28];
                if (node.readHoldingRegisters(Parar_addr, 28) == node.ku8MBSuccess)
                {
                    for(uint8_t i=0;i<28;i++)
                    {
                        temp[i]=node.getResponseBuffer(i);
                    }
                    node.clearResponseBuffer();
                    Parar=bytesToFloat(&temp[0]);
                    Parah=bytesToFloat(&temp[2]);
                    ParaCabW=bytesToFloat(&temp[4]);
                    Paraa=bytesToFloat(&temp[6]);
                    Parab=bytesToFloat(&temp[8]);
                    Parac=bytesToFloat(&temp[10]);
                    Parad=bytesToFloat(&temp[12]);
                    ParaE=bytesToFloat(&temp[14]);
                    Parag=bytesToFloat(&temp[16]);
                    Paran=bytesToFloat(&temp[18]);
                    ParaK1=bytesToFloat(&temp[20]);
                    ParaK2=bytesToFloat(&temp[22]);
                    ParaK3=bytesToFloat(&temp[24]);
                    ParaK4=bytesToFloat(&temp[26]);
                    preferences.putFloat("Parar",Parar);
                    preferences.putFloat("Parah",Parah);
                    preferences.putFloat("ParaCabW",ParaCabW);
                    preferences.putFloat("Paraa",Paraa);
                    preferences.putFloat("Parab",Parab);
                    preferences.putFloat("Parac",Parac);
                    preferences.putFloat("Parad",Parad);
                    preferences.putFloat("ParaE",ParaE);
                    preferences.putFloat("Parag",Parag);
                    preferences.putFloat("Paran",Paran);
                    preferences.putFloat("ParaK1",ParaK1);
                    preferences.putFloat("ParaK2",ParaK2);
                    preferences.putFloat("ParaK3",ParaK3);
                    preferences.putFloat("ParaK4",ParaK4);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(32,0);      // Clear Trigger_Setting_Other
                    // Serial.print("Parar "); Serial.println(Parar);
                    // Serial.print("Parah "); Serial.println(Parah);
                    // Serial.print("ParaCabW "); Serial.println(ParaCabW);
                    // Serial.print("Paraa "); Serial.println(Paraa);
                    // Serial.print("Parab "); Serial.println(Parab);
                    // Serial.print("Parac "); Serial.println(Parac);
                    // Serial.print("Parad "); Serial.println(Parad);
                    // Serial.print("ParaE "); Serial.println(ParaE);
                    // Serial.print("Parag "); Serial.println(Parag);
                    // Serial.print("Paran "); Serial.println(Paran);
                    // Serial.print("ParaK1 "); Serial.println(ParaK1);
                    // Serial.print("ParaK2 "); Serial.println(ParaK2);
                    // Serial.print("ParaK3 "); Serial.println(ParaK3);
                    // Serial.print("ParaK4 "); Serial.println(ParaK4);
            }
        }
        break;

        case 12: // Dang o trang Test Parameter
        {   
            if(Trigger_Page==1)
            {
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }

            uint16_t temp,temp1;
            temp=(is_rom_init_ok<<7) | (is_hx7112_init_ok<<6) | (is_hx7111_init_ok<<5) | (is_ads2_init_ok<<4) | (is_ads1_init_ok<<3) | (DigitalInput_3<<2) | (DigitalInput_2<<1) | DigitalInput_1;
            node.setTransmitBuffer(0, temp);
            result = node.writeMultipleCoils(43, 8);
            node.clearTransmitBuffer();
            Mode_Test_Relay=1;
            
            if(node.readCoils(36,7) == node.ku8MBSuccess)
            {
                temp1=node.getResponseBuffer(0);
                node.clearResponseBuffer();
                Stt_CabMax=temp1 & bit(0);
                Stt_AngleHi=temp1 & bit(1);
                Stt_AngleSet=temp1 & bit(2);
                Stt_LengthHi=temp1 & bit(3);
                Stt_LengthLow=temp1 & bit(4);
                Stt_LoadHi=temp1 & bit(5);
                Stt_LoadSet=temp1 & bit(6);
            }
        }
        break;

        case 13: // Dang o trang Set Loadtable
        {   
            if(Trigger_Page==1)
            {
                node.writeSingleCoil(Multi_Loadtable_State_addr,Multi_Loadtable_State);
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }
            if(node.readCoils(26,1) == node.ku8MBSuccess)
            {
                Trigger_Setting_Device=node.getResponseBuffer(0);
                node.clearResponseBuffer();
            }
            if(Trigger_Setting_Device==1)     // Cài đặt Alarm Angle
            {   
                if(node.readCoils(27,1) == node.ku8MBSuccess)
                {
                    Multi_Loadtable_State=node.getResponseBuffer(0);
                    preferences.putBool("LTB_state",Multi_Loadtable_State);

                    if(Multi_Loadtable_State==1)
                    {
                        Serial.println("Khong su dung");
                        Load_table_value=0;
                        Stt=1;
                        Trigger_LT=1;
                    }
                    else
                    {
                        Serial.println("Su dung");
                        Load_table_value=       preferences.getFloat("LT_value",0);
                        Trigger_LT=1;
                    }

                    node.clearResponseBuffer();
                }
            node.writeSingleCoil(26,0);      // Clear Trigger
            }

            Word_to_Register(Sohang,1);
            Word_to_Register(Socot,2);
            Word_to_Register(Stt,3);
            Float_to_Register(Load_table_value,4,5);
            Float_to_Register((Doitrong[0]/(float)100),6,7);
            Float_to_Register((Doitrong[1]/(float)100),8,9);
            Float_to_Register((Doitrong[2]/(float)100),10,11);
            Float_to_Register((Doitrong[3]/(float)100),12,13);
            Float_to_Register((Doitrong[4]/(float)100),14,15);
            Float_to_Register((Doitrong[5]/(float)100),16,17);
            Float_to_Register((Doitrong[6]/(float)100),18,19);
            Float_to_Register((Doitrong[7]/(float)100),20,21);
            Float_to_Register((Doitrong[8]/(float)100),22,23);
            Float_to_Register((Doitrong[9]/(float)100),24,25);
            result = node.writeMultipleRegisters(40500, 25);
            node.clearTransmitBuffer();
        }
        break;


        case 14: // Dang o trang Set Loadcell
        {   
            uint16_t temp;
            if(Trigger_Page==1)
            {
                Float_to_Register(Loadcell1_value_calib0,1,2);
                Float_to_Register(Loadcell1_value_calib1,3,4);
                Float_to_Register(Loadcell2_value_calib0,5,6);
                Float_to_Register(Loadcell2_value_calib1,7,8);
                result = node.writeMultipleRegisters(40109, 8); // Gui bien len man hinh lan dau
                node.clearTransmitBuffer();

                node.setTransmitBuffer(1, (Loadcell1_raw_calib0>>16) & 0xFFFF);
                node.setTransmitBuffer(0, (Loadcell1_raw_calib0 & 0xFFFF));
                node.setTransmitBuffer(3, (Loadcell1_raw_calib1>>16) & 0xFFFF);
                node.setTransmitBuffer(2, (Loadcell1_raw_calib1 & 0xFFFF));
                node.setTransmitBuffer(5, (Loadcell2_raw_calib0>>16) & 0xFFFF);
                node.setTransmitBuffer(4, (Loadcell2_raw_calib0 & 0xFFFF));
                node.setTransmitBuffer(7, (Loadcell2_raw_calib1>>16) & 0xFFFF);
                node.setTransmitBuffer(6, (Loadcell2_raw_calib1 & 0xFFFF));
                result = node.writeMultipleRegisters(40128, 8); // Gui bien len man hinh lan dau
                node.clearTransmitBuffer();

                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }

            if(node.readCoils(58,5) == node.ku8MBSuccess)
            {
                temp=node.getResponseBuffer(0);
                node.clearResponseBuffer();
                Trigger_Setting_Loadcell1_calib0=temp & bit(0);
                Trigger_Setting_Loadcell1_calib1=temp & bit(1);
                Trigger_Setting_Loadcell2_calib0=temp & bit(2);
                Trigger_Setting_Loadcell2_calib1=temp & bit(3);
                Trigger_Setting_Loadcell=temp & bit(4);
            }

            if(Trigger_Setting_Loadcell1_calib0==1)     // Cài đặt Calib0 Loadcell 1
            {   
                uint16_t temp[2];
                if (node.readHoldingRegisters(40109, 2) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    Loadcell1_value_calib0=bytesToFloat(&temp[0]);
                    Loadcell1_value_calib0=Loadcell1_value_calib0/Cab_main_number;
                    Loadcell1_raw_calib0=Loadcell1_raw;
                    preferences.putFloat("Load1",Loadcell1_value_calib0);
                    preferences.putUInt("Load5",Loadcell1_raw_calib0);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                }
                node.writeSingleCoil(58,0);
                Serial.print("Loadcell1_value_calib0 "); Serial.println(Loadcell1_value_calib0,2);
                Serial.print("Loadcell1_raw_calib0 "); Serial.println(Loadcell1_raw_calib0);
            }

            if(Trigger_Setting_Loadcell1_calib1==1)     // Cài đặt Calib1 Loadcell 1
            {   
                uint16_t temp[2];
                if (node.readHoldingRegisters(40111, 2) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    Loadcell1_value_calib1=bytesToFloat(&temp[0]);
                    Loadcell1_value_calib1=Loadcell1_value_calib1/Cab_main_number;
                    Loadcell1_raw_calib1=Loadcell1_raw;
                    preferences.putFloat("Load2",Loadcell1_value_calib1);
                    preferences.putUInt("Load6",Loadcell1_raw_calib1);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                }
                node.writeSingleCoil(59,0);
                Serial.print("Loadcell1_value_calib1 "); Serial.println(Loadcell1_value_calib1,2);
                Serial.print("Loadcell1_raw_calib1 "); Serial.println(Loadcell1_raw_calib1);
            }

            if(Trigger_Setting_Loadcell2_calib0==1)     // Cài đặt Calib0 Loadcell 2
            {   
                uint16_t temp[2];
                if (node.readHoldingRegisters(40113, 2) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    Loadcell2_value_calib0=bytesToFloat(&temp[0]);
                    Loadcell2_value_calib0=Loadcell2_value_calib0/Cab_aux_number;
                    Loadcell2_raw_calib0=Loadcell2_raw;
                    preferences.putFloat("Load3",Loadcell2_value_calib0);
                    preferences.putUInt("Load7",Loadcell2_raw_calib0);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                }
                node.writeSingleCoil(60,0);
                Serial.print("Loadcell2_value_calib0 "); Serial.println(Loadcell2_value_calib0,2);
                Serial.print("Loadcell2_raw_calib0 "); Serial.println(Loadcell2_raw_calib0);
            }

            if(Trigger_Setting_Loadcell2_calib1==1)     // Cài đặt Calib1 Loadcell 2
            {   
                uint16_t temp[2];
                if (node.readHoldingRegisters(40115, 2) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    Loadcell2_value_calib1=bytesToFloat(&temp[0]);
                    Loadcell2_value_calib1=Loadcell2_value_calib1/Cab_aux_number;
                    Loadcell2_raw_calib1=Loadcell2_raw;
                    preferences.putFloat("Load4",Loadcell2_value_calib1);
                    preferences.putUInt("Load8",Loadcell2_raw_calib1);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                }
                node.writeSingleCoil(61,0);
                Serial.print("Loadcell2_value_calib1 "); Serial.println(Loadcell2_value_calib1,2);
                Serial.print("Loadcell2_raw_calib1 "); Serial.println(Loadcell2_raw_calib1);
            }

            if(Trigger_Setting_Loadcell==1)
            {   uint16_t temp[8];
                if (node.readHoldingRegisters(40128, 8) == node.ku8MBSuccess)
                {
                    temp[0]=node.getResponseBuffer(0);
                    temp[1]=node.getResponseBuffer(1);
                    temp[2]=node.getResponseBuffer(2);
                    temp[3]=node.getResponseBuffer(3);
                    temp[4]=node.getResponseBuffer(4);
                    temp[5]=node.getResponseBuffer(5);
                    temp[6]=node.getResponseBuffer(6);
                    temp[7]=node.getResponseBuffer(7);

                    node.clearResponseBuffer();
                    Loadcell1_raw_calib0=temp[0] | temp[1]<<16;
                    Loadcell1_raw_calib1=temp[2] | temp[3]<<16;
                    Loadcell2_raw_calib0=temp[4] | temp[5]<<16;
                    Loadcell2_raw_calib1=temp[6] | temp[7]<<16;
                    
                    preferences.putUInt("Load5",Loadcell1_raw_calib0);
                    preferences.putUInt("Load6",Loadcell1_raw_calib1);
                    preferences.putUInt("Load7",Loadcell2_raw_calib0);
                    preferences.putUInt("Load8",Loadcell2_raw_calib1);

                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(62,0);      // Clear Trigger_Setting_Length
                    Serial.print("Loadcell1_raw_calib0 "); Serial.println(Loadcell1_raw_calib0);
                    Serial.print("Loadcell1_raw_calib1 "); Serial.println(Loadcell1_raw_calib1);
                    Serial.print("Loadcell2_raw_calib0 "); Serial.println(Loadcell2_raw_calib0);
                    Serial.print("Loadcell2_raw_calib1 "); Serial.println(Loadcell2_raw_calib1);
            }
            
            Float_to_Register(Loadcell1_value,1,2);
            Float_to_Register(Loadcell2_value,3,4);
            Float_to_Register(Loadcelltotal_value,5,6);
            result = node.writeMultipleRegisters(40085, 6); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();

            node.setTransmitBuffer(1, (Loadcell1_raw>>16) & 0xFFFF);
            node.setTransmitBuffer(0, (Loadcell1_raw & 0xFFFF));
            node.setTransmitBuffer(3, (Loadcell2_raw>>16) & 0xFFFF);
            node.setTransmitBuffer(2, (Loadcell2_raw & 0xFFFF));
            result = node.writeMultipleRegisters(40310, 4); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();
            // Serial.print("Loadcell1_raw ");Serial.println(Loadcell1_raw);
            // Serial.print("Loadcell2_raw ");Serial.println(Loadcell2_raw);
        }
        break;

        case 15: // Dang o trang Set Load Banh xich
        {   
            if(Trigger_Page==1)
            {
                Word_to_Register(Load_alarm_set,1);
                Word_to_Register(Load_alarm_max,2);
                result = node.writeMultipleRegisters(Load_alarm_set_addr, 2); // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();

                Float_to_Register(P0_value,1,2);
                Float_to_Register(P0_Loadcell,3,4);
                Float_to_Register(P0_Length,5,6);
                Float_to_Register(P0_Angle,7,8);
                Float_to_Register(P0_L0_value,9,10);

                result = node.writeMultipleRegisters(40159, 10); // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }

            if(node.readCoils(28,2) == node.ku8MBSuccess)
            {
                Set_load_0=node.getResponseBuffer(0) & bit(0);
                Trigger_Setting_Load=node.getResponseBuffer(0) & bit(1);
                node.clearResponseBuffer();
            }

            if(Set_load_0==1)   // Bắt đầu set Load 0, quan trọng.......
            {
                flag_setLoad0_Crawler=1;
                node.writeSingleCoil(28,0);
                node.writeSingleCoil(Trigger_Page_addr,1);
            }

            if(Trigger_Setting_Load==1)
            {
                if (node.readHoldingRegisters(Load_alarm_set_addr, 2) == node.ku8MBSuccess)
                {
                    Load_alarm_set=node.getResponseBuffer(0);
                    Load_alarm_max=node.getResponseBuffer(1);
                    node.clearResponseBuffer();
                    preferences.putShort("LoadS",Load_alarm_set);
                    preferences.putShort("LoadM",Load_alarm_max);
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(29,0);      // Clear Trigger_Setting_Load
            }

            Float_to_Register(Angle_value,1,2);
            Float_to_Register(Length_value,3,4);
            Float_to_Register(W_value,5,6);
            result = node.writeMultipleRegisters(Angle_value_addr, 6); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();

            Float_to_Register(Loadcelltotal_value,1,2);
            Float_to_Register(L0_value,3,4);
            result = node.writeMultipleRegisters(40089, 4); // Gui bien len man hinh lien tuc
            node.clearTransmitBuffer();
        }
        break;

        case 16: // Dang o trang Cài đặt customer
        {   
            Trigger_Customer=1;
            node.writeSingleCoil(64,1); // Trigger Customer
        }
        break;

        case 17: // Dang o trang Cài đặt %
        {   
            if(Trigger_Page==1)
            {
                Serial.println("Cap nhat lan dau");
                Word_to_Register(Taiphantram_05,1);
                Word_to_Register(Taiphantram_10,2);
                Word_to_Register(Taiphantram_15,3);
                Word_to_Register(Taiphantram_20,4);
                Word_to_Register(Taiphantram_25,5);
                Word_to_Register(Taiphantram_30,6);
                Word_to_Register(Taiphantram_35,7);
                Word_to_Register(Taiphantram_40,8);
                Word_to_Register(Taiphantram_45,9);
                Word_to_Register(Taiphantram_50,10);
                Word_to_Register(Taiphantram_55,11);
                Word_to_Register(Taiphantram_60,12);
                Word_to_Register(Taiphantram_65,13);
                Word_to_Register(Taiphantram_70,14);
                Word_to_Register(Taiphantram_75,15);
                Word_to_Register(Taiphantram_80,16);
                Word_to_Register(Taiphantram_85,17);
                Word_to_Register(Taiphantram_90,18);
                result = node.writeMultipleRegisters(40525, 18); // Gui bien len man hinh 1 lan dau load trang
                node.clearTransmitBuffer();
                node.writeSingleCoil(Trigger_Page_addr,0);      // Clear Trigger Page
            }

            if(node.readCoils(65,1) == node.ku8MBSuccess)
            {
                Trigger_Setting_Other1=node.getResponseBuffer(0);
                node.clearResponseBuffer();
            }

            if(Trigger_Setting_Other1==1)     // Cài đặt Setting Other
            {   uint16_t temp[18];
                if (node.readHoldingRegisters(40525, 18) == node.ku8MBSuccess)
                {
                    for(uint8_t i=0;i<18;i++)
                    {
                        temp[i]=node.getResponseBuffer(i);
                    }
                    node.clearResponseBuffer();
                    node.getResponseBuffer(0);
                    // Taiphantram_05=bytesToFloat(&temp[0]);
                    // Taiphantram_10=bytesToFloat(&temp[1]);
                    // Taiphantram_15=bytesToFloat(&temp[2]);
                    // Taiphantram_20=bytesToFloat(&temp[3]);
                    // Taiphantram_25=bytesToFloat(&temp[4]);
                    // Taiphantram_30=bytesToFloat(&temp[5]);
                    // Taiphantram_35=bytesToFloat(&temp[6]);
                    // Taiphantram_40=bytesToFloat(&temp[7]);
                    // Taiphantram_45=bytesToFloat(&temp[8]);
                    // Taiphantram_50=bytesToFloat(&temp[9]);
                    // Taiphantram_55=bytesToFloat(&temp[10]);
                    // Taiphantram_60=bytesToFloat(&temp[11]);
                    // Taiphantram_65=bytesToFloat(&temp[12]);
                    // Taiphantram_70=bytesToFloat(&temp[13]);
                    // Taiphantram_75=bytesToFloat(&temp[14]);
                    // Taiphantram_80=bytesToFloat(&temp[15]);
                    // Taiphantram_85=bytesToFloat(&temp[16]);
                    // Taiphantram_90=bytesToFloat(&temp[17]);

                    Taiphantram_05=temp[0];
                    Taiphantram_10=temp[1];
                    Taiphantram_15=temp[2];
                    Taiphantram_20=temp[3];
                    Taiphantram_25=temp[4];
                    Taiphantram_30=temp[5];
                    Taiphantram_35=temp[6];
                    Taiphantram_40=temp[7];
                    Taiphantram_45=temp[8];
                    Taiphantram_50=temp[9];
                    Taiphantram_55=temp[10];
                    Taiphantram_60=temp[11];
                    Taiphantram_65=temp[12];
                    Taiphantram_70=temp[13];
                    Taiphantram_75=temp[14];
                    Taiphantram_80=temp[15];
                    Taiphantram_85=temp[16];
                    Taiphantram_90=temp[17];

                    preferences.putUInt("Taiphantram_05",Taiphantram_05);
                    preferences.putUInt("Taiphantram_10",Taiphantram_10);
                    preferences.putUInt("Taiphantram_15",Taiphantram_15);
                    preferences.putUInt("Taiphantram_20",Taiphantram_20);
                    preferences.putUInt("Taiphantram_25",Taiphantram_25);
                    preferences.putUInt("Taiphantram_30",Taiphantram_30);
                    preferences.putUInt("Taiphantram_35",Taiphantram_35);
                    preferences.putUInt("Taiphantram_40",Taiphantram_40);
                    preferences.putUInt("Taiphantram_45",Taiphantram_45);
                    preferences.putUInt("Taiphantram_50",Taiphantram_50);
                    preferences.putUInt("Taiphantram_55",Taiphantram_55);
                    preferences.putUInt("Taiphantram_60",Taiphantram_60);
                    preferences.putUInt("Taiphantram_65",Taiphantram_65);
                    preferences.putUInt("Taiphantram_70",Taiphantram_70);
                    preferences.putUInt("Taiphantram_75",Taiphantram_75);
                    preferences.putUInt("Taiphantram_80",Taiphantram_80);
                    preferences.putUInt("Taiphantram_85",Taiphantram_85);
                    preferences.putUInt("Taiphantram_90",Taiphantram_90);
                    Serial.println("Cap nhat %");
                    node.writeSingleCoil(Trigger_Page_addr,1);      // Clear Trigger Page
                 }
                    node.writeSingleCoil(65,0);      // Clear Trigger_Setting_Other
            }
        }
        break;

        default:
        {
            //result = node.writeSingleRegister(Screen_no_control_addr,0x02);
        }
        break;
    }
    // Serial.print("Task HMI running on: ");
    // Serial.println(xPortGetCoreID());
    digitalWrite(Led1, !digitalRead(Led1));
    vTaskDelay(200);
  } 
}